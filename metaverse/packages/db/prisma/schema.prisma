// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @unique @default(cuid())
  googleId          String?
  username          String  @unique
  password          String  
  avatarId          String?
  role              Role
  spaces            Space[] @relation("AdminSpaces")
  invitedSpaces     Space[] @relation("MemberSpaces")
  messages          Message[]
  avatar            Avatar?  @relation(fields: [avatarId], references: [id],onDelete:Cascade)
}



model Space {
  id                  String  @id @unique @default(cuid())
  name                String
  description         String
  capacity            Int
  favourite           Boolean?
  width               Int?
  height              Int?
  thumbnail           String?
  adminId             String
  mapId               String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  
  elements            spaceElements[]
  messages            Message[]
  members             User[]  @relation("MemberSpaces")
  admin               User   @relation(fields: [adminId], references: [id],name:"AdminSpaces",onDelete:Cascade)
  map                 Map    @relation(fields: [mapId], references: [id],onDelete:Cascade)
}

model spaceElements {
  id        String @id @unique @default(cuid())
  name      String
  elementId String
  spaceId   String
  x         Int
  y         Int
  space     Space  @relation(fields: [spaceId], references: [id],onDelete:Cascade)
  element   Element @relation(fields: [elementId],references: [id],onDelete:Cascade)
}

model Element {
  id       String @id @unique @default(cuid())
  name     String
  width    Int
  height   Int
  static   Boolean
  imageUrl String
  mapElement mapElements[] 
  spaces    spaceElements[] 
}

model Map {
  id                  String  @id @unique @default(cuid())
  thumbnail           String
  width               Int
  height              Int
  name                String
  elements            mapElements[] 
  spaces              Space[]
}

model mapElements {
  id        String  @id @unique @default(cuid())  
  name      String?
  mapId     String  
  elementId String
  x         Int?
  y         Int?
  map       Map    @relation(fields: [mapId], references: [id],onDelete:Cascade)
  element   Element? @relation(fields: [elementId], references: [id],onDelete:Cascade)
}

model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String?
  name     String?
  users    User[]
}

model Message{
  id        String  @id @unique 
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime?
  spaceId   String
  userId    String
  space     Space   @relation(fields: [spaceId], references: [id],onDelete:Cascade)
  user      User    @relation(fields: [userId], references: [id],onDelete:Cascade)
}

enum Role {
  Admin
  User
}
